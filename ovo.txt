class ApiResponse<T> {
  final T? data;
  final String? error;

  ApiResponse({this.data, this.error});


  bool get isSuccess => data != null;
}


class APIUrls {
  static const String baseURL = 'https://admin.jewellery.ctpbd.info/api/shop/';

  // Auth - (User)
  static const String login = '${baseURL}login';
  static const String register = '${baseURL}register';
  static const String dashboard = '${baseURL}dashboard';

  // Product
  static const String product = '${baseURL}products';
  static const String productCreate = '${baseURL}products';
  static const String productUpdateOrDelete = '${baseURL}product/id';

  // Category
  static const String category = '${baseURL}categories';
  static const String categoryCreate = '${baseURL}categories';
  static const String categoryUpdateOrDelete = '${baseURL}categories/id';
}


import 'package:flutter/material.dart';
import '../service/auth_service.dart';
import '../screens/home_screen.dart';
import 'registration_screen.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _authService = AuthService();
  bool _isLoading = false;

  void _login() async {
    setState(() {
      _isLoading = true;
    });

    final response = await _authService.login(
      _emailController.text,
      _passwordController.text,
    );

    setState(() {
      _isLoading = false;
    });

    if (response.isSuccess) {
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(
          builder: (context) => HomeScreen(user: response.data!),
        ),
      );
      print('Token: ${response.data?.token}');
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(response.error ?? 'An unknown error occurred')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Scaffold(
      backgroundColor: theme.colorScheme.background,
      body: SingleChildScrollView(
        child: Container(
          padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 60),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              const Icon(Icons.lock, size: 80, color: Colors.blueAccent),
              const SizedBox(height: 24),
              const Text(
                'Welcome Back!',
                textAlign: TextAlign.center,
                style: TextStyle(fontSize: 28, fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 8),
              const Text(
                'Login to your account',
                textAlign: TextAlign.center,
                style: TextStyle(fontSize: 16, color: Colors.grey),
              ),
              const SizedBox(height: 32),

              Card(
                elevation: 5,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(16),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(20),
                  child: Column(
                    children: [
                      TextField(
                        controller: _emailController,
                        decoration: InputDecoration(
                          labelText: 'Email',
                          prefixIcon: const Icon(Icons.email),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                        keyboardType: TextInputType.emailAddress,
                      ),
                      const SizedBox(height: 16),
                      TextField(
                        controller: _passwordController,
                        decoration: InputDecoration(
                          labelText: 'Password',
                          prefixIcon: const Icon(Icons.lock),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                        obscureText: true,
                      ),
                      const SizedBox(height: 24),
                      _isLoading
                          ? const CircularProgressIndicator()
                          : SizedBox(
                              width: double.infinity,
                              child: ElevatedButton(
                                onPressed: _login,
                                style: ElevatedButton.styleFrom(
                                  padding: const EdgeInsets.symmetric(
                                    vertical: 16,
                                  ),
                                  shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(12),
                                  ),
                                ),
                                child: const Text(
                                  'Login',
                                  style: TextStyle(fontSize: 16),
                                ),
                              ),
                            ),
                      const SizedBox(height: 16),
                      TextButton(
                        onPressed: () {
                          Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (context) => const RegistrationScreen(),
                            ),
                          );
                        },
                        child: const Text(
                          'Don\'t have an account? Register',
                          style: TextStyle(color: Colors.blueAccent),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


import 'package:flutter/material.dart';
import '../service/auth_service.dart';
import '../models/user.dart';
import '../screens/home_screen.dart';

class RegistrationScreen extends StatefulWidget {
  const RegistrationScreen({super.key});

  @override
  State<RegistrationScreen> createState() => _RegistrationScreenState();
}

class _RegistrationScreenState extends State<RegistrationScreen> {
  final _shopNameController = TextEditingController();
  final _ownerNameController = TextEditingController();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _passwordConfirmationController = TextEditingController();
  final _authService = AuthService();
  bool _isLoading = false;

  void _register() async {
    setState(() {
      _isLoading = true;
    });

    final user = User(
      shopName: _shopNameController.text,
      ownerName: _ownerNameController.text,
      email: _emailController.text,
      password: _passwordController.text,
      passwordConfirmation: _passwordConfirmationController.text,
      agree: 1,
    );

    final response = await _authService.register(user);

    setState(() {
      _isLoading = false;
    });

    if (response.isSuccess) {
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(
          builder: (context) => HomeScreen(user: response.data!),
        ),
      );
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(response.error ?? 'An unknown error occurred')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Scaffold(
      backgroundColor: theme.colorScheme.background,
      body: SingleChildScrollView(
        child: Container(
          padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 60),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              const Icon(Icons.store, size: 80, color: Colors.blueAccent),
              const SizedBox(height: 24),
              const Text(
                'Create Account',
                textAlign: TextAlign.center,
                style: TextStyle(fontSize: 28, fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 8),
              const Text(
                'Register your shop to get started',
                textAlign: TextAlign.center,
                style: TextStyle(fontSize: 16, color: Colors.grey),
              ),
              const SizedBox(height: 32),

              Card(
                elevation: 5,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(16),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(20),
                  child: Column(
                    children: [
                      TextField(
                        controller: _shopNameController,
                        decoration: InputDecoration(
                          labelText: 'Shop Name',
                          prefixIcon: const Icon(Icons.storefront),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                      ),
                      const SizedBox(height: 16),
                      TextField(
                        controller: _ownerNameController,
                        decoration: InputDecoration(
                          labelText: 'Owner Name',
                          prefixIcon: const Icon(Icons.person),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                      ),
                      const SizedBox(height: 16),
                      TextField(
                        controller: _emailController,
                        decoration: InputDecoration(
                          labelText: 'Email',
                          prefixIcon: const Icon(Icons.email),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                        keyboardType: TextInputType.emailAddress,
                      ),
                      const SizedBox(height: 16),
                      TextField(
                        controller: _passwordController,
                        decoration: InputDecoration(
                          labelText: 'Password',
                          prefixIcon: const Icon(Icons.lock),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                        obscureText: true,
                      ),
                      const SizedBox(height: 16),
                      TextField(
                        controller: _passwordConfirmationController,
                        decoration: InputDecoration(
                          labelText: 'Confirm Password',
                          prefixIcon: const Icon(Icons.lock_outline),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                        obscureText: true,
                      ),
                      const SizedBox(height: 24),
                      _isLoading
                          ? const CircularProgressIndicator()
                          : SizedBox(
                              width: double.infinity,
                              child: ElevatedButton(
                                onPressed: _register,
                                style: ElevatedButton.styleFrom(
                                  padding: const EdgeInsets.symmetric(
                                    vertical: 16,
                                  ),
                                  shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(12),
                                  ),
                                ),
                                child: const Text(
                                  'Register',
                                  style: TextStyle(fontSize: 16),
                                ),
                              ),
                            ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


class Category {
  final int id;
  final String name;

  Category({required this.id, required this.name});

  factory Category.fromJson(Map<String, dynamic> json) {
    return Category(
      id: json['id'],
      name: json['name'] ?? 'Unnamed Category',
    );
  }
}


class DashboardData {
  final String shopBalance;
  final int totalOrders;
  final int pendingOrders;
  final int deliveredOrders;
  final int completedOrders;
  final int cancelledOrders;

  DashboardData({
    required this.shopBalance,
    required this.totalOrders,
    required this.pendingOrders,
    required this.deliveredOrders,
    required this.completedOrders,
    required this.cancelledOrders,
  });

  factory DashboardData.fromJson(Map<String, dynamic> json) {
    return DashboardData(
      shopBalance: json['shop_balance'] ?? '0.0 BDT',
      totalOrders: json['total_orders'] ?? 0,
      pendingOrders: json['pending_orders'] ?? 0,
      deliveredOrders: json['delivered_orders'] ?? 0,
      completedOrders: json['completed_orders'] ?? 0,
      cancelledOrders: json['cancelled_orders'] ?? 0,
    );
  }
}


class Product {
  final int id;
  final String name;
  final String? image;
  final String price;

  Product({
    required this.id,
    required this.name,
    this.image,
    required this.price
  });

  factory Product.fromJson(Map<String, dynamic> json) {
    return Product(
      id: json['id'],
      name: json['name'] ?? 'Unnamed Product',
      image: json['image'],
      price: json['price']?.toString() ?? 'N/A',
    );
  }
}


class User {
  final int? id;
  final String shopName;
  final String ownerName;
  final String email;
  final String? password;
  final String? passwordConfirmation;
  final String? token;
  final int? agree;

  User({
    this.id,
    required this.shopName,
    required this.ownerName,
    required this.email,
    this.password,
    this.passwordConfirmation,
    this.token,
    this.agree,
  });

  User copyWith({String? token}) {
    return User(
      id: id,
      shopName: shopName,
      ownerName: ownerName,
      email: email,
      token: token ?? this.token,
    );
  }

  factory User.fromJson(Map<String, dynamic> json) {
    final shopData = json['shop'] ?? {};
    return User(
      id: shopData['id'],
      shopName: shopData['shop_name'] ?? '',
      ownerName: shopData['owner_name'] ?? '',
      email: shopData['email'] ?? '',
      token: json['access_token'],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'shop_name': shopName,
      'owner_name': ownerName,
      'email': email,
      if (password != null) 'password': password,
      if (passwordConfirmation != null)
        'password_confirmation': passwordConfirmation,
      if (agree != null) 'agree': agree,
    };
  }
}



import 'package:flutter/material.dart';
import 'package:ovoride/api/api_response.dart';
import 'package:ovoride/service/category_service.dart';
import '../models/category.dart';
import '../utils/shared_prefs_helper.dart';

class CategoryScreen extends StatefulWidget {
  const CategoryScreen({super.key});

  @override
  State<CategoryScreen> createState() => _CategoryScreenState();
}

class _CategoryScreenState extends State<CategoryScreen> {
  final CategoryService _service = CategoryService();
  List<Category> _categories = [];
  bool _loading = true;
  String? _token;

  final TextEditingController _nameController = TextEditingController();
  int? _editingId;

  @override
  void initState() {
    super.initState();
    _loadData();
  }

  Future<void> _loadData() async {
    setState(() => _loading = true);
    _token = await SharedPrefsHelper.getToken();
    if (_token == null) {
      setState(() => _loading = false);
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(const SnackBar(content: Text('User not logged in')));
      return;
    }

    final res = await _service.getCategories(_token!);
    setState(() {
      _loading = false;
      _categories = res.data ?? [];
    });

    if (res.error != null) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text(res.error!)));
    }
  }

  Future<void> _openForm({Category? category}) async {
    _editingId = category?.id;
    _nameController.text = category?.name ?? '';

    await showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      builder: (ctx) {
        return Padding(
          padding: EdgeInsets.only(
            bottom: MediaQuery.of(ctx).viewInsets.bottom,
          ),
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Text(
                  category == null ? 'Add Category' : 'Edit Category',
                  style: const TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 12),
                TextField(
                  controller: _nameController,
                  decoration: const InputDecoration(labelText: 'Name'),
                ),
                const SizedBox(height: 12),
                Row(
                  children: [
                    Expanded(
                      child: OutlinedButton(
                        onPressed: () => Navigator.pop(ctx),
                        child: const Text('Cancel'),
                      ),
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: ElevatedButton(
                        onPressed: () {
                          Navigator.pop(ctx);
                          _saveCategory();
                        },
                        child: const Text('Save'),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Future<void> _saveCategory() async {
    final name = _nameController.text.trim();
    if (name.isEmpty) return;
    setState(() => _loading = true);

    if (_token == null) {
      _token = await SharedPrefsHelper.getToken();
      if (_token == null) {
        setState(() => _loading = false);
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(const SnackBar(content: Text('User not logged in')));
        return;
      }
    }

    ApiResponse<Category> res;
    if (_editingId == null) {
      res = await _service.createCategory(_token!, name);
    } else {
      res = await _service.updateCategory(_token!, _editingId!, name);
    }

    setState(() => _loading = false);

    if (res.error != null) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text(res.error!)));
    } else {
      _nameController.clear();
      _editingId = null;
      await _loadData();
    }
  }

  Future<void> _confirmDelete(int id) async {
    final ok = await showDialog<bool>(
      context: context,
      builder: (_) => AlertDialog(
        title: const Text('Delete Category'),
        content: const Text('Are you sure you want to delete this category?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(_, false),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () => Navigator.pop(_, true),
            child: const Text('Delete'),
          ),
        ],
      ),
    );
    if (ok != true) return;

    setState(() => _loading = true);
    final res = await _service.deleteCategory(_token!, id);
    setState(() => _loading = false);

    if (res.error != null) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text(res.error!)));
    } else {
      await _loadData();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Categories'),
        actions: [
          IconButton(onPressed: _loadData, icon: const Icon(Icons.refresh)),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () => _openForm(),
        child: const Icon(Icons.add),
      ),
      body: _loading
          ? const Center(child: CircularProgressIndicator())
          : RefreshIndicator(
              onRefresh: _loadData,
              child: _categories.isEmpty
                  ? ListView(
                      physics: const AlwaysScrollableScrollPhysics(),
                      children: [
                        const SizedBox(height: 60),
                        const Center(
                          child: Text('No categories yet. Tap + to create.'),
                        ),
                      ],
                    )
                  : ListView.separated(
                      padding: const EdgeInsets.all(12),
                      itemCount: _categories.length,
                      separatorBuilder: (_, __) => const SizedBox(height: 8),
                      itemBuilder: (context, i) {
                        final c = _categories[i];
                        return ListTile(
                          title: Text(c.name),
                          trailing: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              IconButton(
                                icon: const Icon(Icons.edit),
                                onPressed: () => _openForm(category: c),
                              ),
                              IconButton(
                                icon: const Icon(
                                  Icons.delete,
                                  color: Colors.red,
                                ),
                                onPressed: () => _confirmDelete(c.id),
                              ),
                            ],
                          ),
                        );
                      },
                    ),
            ),
    );
  }
}



import 'package:flutter/material.dart';
import 'package:ovoride/screens/category_screen.dart';
import 'package:ovoride/screens/product_screen.dart';
import 'package:ovoride/utils/shared_prefs_helper.dart';
import '../service/home_service.dart';
import '../models/category.dart';
import '../models/dashboard.dart';
import '../models/product.dart';
import '../models/user.dart';
import '../login/login_screen.dart';

class HomeScreen extends StatefulWidget {
  final User user;

  const HomeScreen({super.key, required this.user});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  final HomeService _homeService = HomeService();

  late Future<DashboardData> _dashboardDataFuture;
  late Future<List<Product>> _productsFuture;
  late Future<List<Category>> _categoriesFuture;

  @override
  void initState() {
    super.initState();
    _loadData();
  }

  void _loadData() {
    final token = widget.user.token;
    if (token != null) {
      setState(() {
        _dashboardDataFuture = _fetchDashboardData(token);
        _productsFuture = _fetchProducts(token);
        _categoriesFuture = _fetchCategories(token);
      });
    }
  }

  Future<DashboardData> _fetchDashboardData(String token) async {
    final response = await _homeService.getDashboardData(token);
    if (response.isSuccess) return response.data!;
    throw Exception(response.error);
  }

  Future<List<Product>> _fetchProducts(String token) async {
    final response = await _homeService.getProducts(token);
    if (response.isSuccess) return response.data!;
    throw Exception(response.error);
  }

  Future<List<Category>> _fetchCategories(String token) async {
    final response = await _homeService.getCategories(token);
    if (response.isSuccess) return response.data!;
    throw Exception(response.error);
  }

  @override
  Widget build(BuildContext context) {
    if (widget.user.token == null) {
      return Scaffold(
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text("Login Success."),
              const Text("Authentication error. Please log in again."),
              ElevatedButton(
                onPressed: _logout,
                child: const Text("Go to Login"),
              ),
            ],
          ),
        ),
      );
    }

    return Scaffold(
      backgroundColor: Colors.grey[50],
      drawer: Drawer(
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.only(
            topRight: Radius.circular(24),
            bottomRight: Radius.circular(24),
          ),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            UserAccountsDrawerHeader(
              decoration: const BoxDecoration(
                gradient: LinearGradient(
                  colors: [Color(0xFF007BFF), Color(0xFF00C6FF)],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
              ),
              currentAccountPicture: CircleAvatar(
                backgroundColor: Colors.white,
                child: Text(
                  widget.user.ownerName.isNotEmpty
                      ? widget.user.ownerName[0].toUpperCase()
                      : '?',
                  style: const TextStyle(
                    fontSize: 28,
                    fontWeight: FontWeight.bold,
                    color: Colors.blueAccent,
                  ),
                ),
              ),
              accountName: Text(
                widget.user.ownerName,
                style: const TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
              accountEmail: Text(widget.user.shopName),
            ),

            Expanded(
              child: ListView(
                padding: EdgeInsets.zero,
                children: [
                  ListTile(
                    leading: const Icon(
                      Icons.dashboard,
                      color: Colors.blueAccent,
                    ),
                    title: const Text('Dashboard'),
                    onTap: () {
                      Navigator.pop(context);
                    },
                  ),
                  ListTile(
                    leading: const Icon(Icons.category),
                    title: const Text('Categories'),
                    onTap: () {
                      if (widget.user.token == null ||
                          widget.user.token!.isEmpty) {
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(
                            content: Text('User is not logged in'),
                          ),
                        );
                        return;
                      }
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (_) => const CategoryScreen(),
                        ),
                      );
                    },
                  ),

                  ListTile(
                    leading: const Icon(Icons.inventory_2_outlined),
                    title: const Text('Products'),
                    onTap: () {
                      if (widget.user.token == null ||
                          widget.user.token!.isEmpty) {
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(
                            content: Text('User is not logged in'),
                          ),
                        );
                        return;
                      }
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (_) => const ProductScreen(),
                        ),
                      );
                    },
                  ),

                  ListTile(
                    leading: const Icon(
                      Icons.account_balance_wallet_outlined,
                      color: Colors.teal,
                    ),
                    title: const Text('Wallet'),
                    onTap: () {},
                  ),
                  ListTile(
                    leading: const Icon(
                      Icons.person_outline,
                      color: Colors.purple,
                    ),
                    title: const Text('Profile'),
                    onTap: () {},
                  ),
                  ListTile(
                    leading: const Icon(
                      Icons.settings_outlined,
                      color: Colors.grey,
                    ),
                    title: const Text('Settings'),
                    onTap: () {},
                  ),
                  const Divider(),
                  ListTile(
                    leading: const Icon(Icons.logout, color: Colors.redAccent),
                    title: const Text('Logout'),
                    onTap: _logout,
                  ),
                ],
              ),
            ),

            Padding(
              padding: const EdgeInsets.all(12.0),
              child: Column(
                children: const [
                  Text(
                    'Ovoride v1.0.0',
                    style: TextStyle(fontSize: 12, color: Colors.grey),
                  ),
                  Text(
                    '© 2025 Ovoride Inc.',
                    style: TextStyle(fontSize: 12, color: Colors.grey),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),

      appBar: AppBar(
        elevation: 2,
        backgroundColor: Colors.white,
        foregroundColor: Colors.black87,
        centerTitle: false,
        title: Row(
          children: [
            const Icon(Icons.storefront, color: Colors.blueAccent),
            const SizedBox(width: 8),
            Expanded(
              child: Text(
                widget.user.shopName,
                style: const TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                  color: Colors.black87,
                ),
                overflow: TextOverflow.ellipsis,
              ),
            ),
          ],
        ),
        actions: [
          IconButton(
            icon: const Icon(
              Icons.notifications_none,
              color: Colors.blueAccent,
            ),
            tooltip: 'Notifications',
            onPressed: () {},
          ),
          IconButton(
            icon: const Icon(Icons.logout, color: Colors.redAccent),
            tooltip: 'Logout',
            onPressed: _logout,
          ),
          const SizedBox(width: 8),
        ],
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.vertical(bottom: Radius.circular(16)),
        ),
      ),

      body: RefreshIndicator(
        onRefresh: () async => _loadData(),
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Container(
                padding: const EdgeInsets.symmetric(vertical: 12),
                child: Row(
                  children: [
                    const Icon(
                      Icons.waving_hand,
                      color: Colors.orange,
                      size: 32,
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        'Welcome, ${widget.user.ownerName}!',
                        style: const TextStyle(
                          fontSize: 26,
                          fontWeight: FontWeight.w700,
                          color: Colors.black87,
                          shadows: [
                            Shadow(
                              color: Colors.black12,
                              offset: Offset(0, 2),
                              blurRadius: 4,
                            ),
                          ],
                        ),
                        overflow: TextOverflow.ellipsis,
                      ),
                    ),
                  ],
                ),
              ),

              const SizedBox(height: 24),

              _buildSectionHeader(context, 'Dashboard'),
              _buildDashboardSection(),
              const SizedBox(height: 24),

              _buildSectionHeader(context, 'Categories'),
              _buildCategoriesSection(),
              const SizedBox(height: 24),

              _buildSectionHeader(context, 'Recent Products'),
              _buildProductsSection(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildSectionHeader(BuildContext context, String title) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8.0),
      child: Text(
        title,
        style: const TextStyle(
          fontSize: 20,
          fontWeight: FontWeight.bold,
          color: Colors.black87,
        ),
      ),
    );
  }

  Widget _buildDashboardSection() {
    return FutureBuilder<DashboardData>(
      future: _dashboardDataFuture,
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
        } else if (snapshot.hasError) {
          return Center(child: Text('Error: ${snapshot.error}'));
        } else if (snapshot.hasData) {
          final data = snapshot.data!;
          return GridView.count(
            crossAxisCount: 2,
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            childAspectRatio: 2.5,
            mainAxisSpacing: 12,
            crossAxisSpacing: 12,
            children: [
              _buildDashboardCard(
                'Balance',
                data.shopBalance,
                Icons.account_balance_wallet,
                Colors.green,
              ),
              _buildDashboardCard(
                'Total Orders',
                '${data.totalOrders}',
                Icons.shopping_cart,
                Colors.blue,
              ),
              _buildDashboardCard(
                'Pending',
                '${data.pendingOrders}',
                Icons.pending_actions,
                Colors.orange,
              ),
              _buildDashboardCard(
                'Completed',
                '${data.completedOrders}',
                Icons.check_circle,
                Colors.purple,
              ),
            ],
          );
        }
        return const Center(child: Text("No dashboard data available."));
      },
    );
  }

  Widget _buildCategoriesSection() {
    if (widget.user.token == null) {
      return const SizedBox(); // hide list if not logged in
    }

    return FutureBuilder<List<Category>>(
      future: _categoriesFuture,
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const SizedBox(
            height: 80,
            child: Center(child: CircularProgressIndicator()),
          );
        } else if (snapshot.hasError) {
          return Center(child: Text('Error: ${snapshot.error}'));
        } else if (snapshot.hasData) {
          final categories = snapshot.data!;
          if (categories.isEmpty) {
            return const Center(child: Text("No categories found."));
          }
          return SizedBox(
            height: 80,
            child: ListView.builder(
              scrollDirection: Axis.horizontal,
              itemCount: categories.length,
              itemBuilder: (context, index) {
                return Container(
                  margin: const EdgeInsets.only(right: 12),
                  padding: const EdgeInsets.symmetric(
                    horizontal: 16,
                    vertical: 12,
                  ),
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(12),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.grey.withOpacity(0.2),
                        blurRadius: 5,
                        offset: const Offset(0, 3),
                      ),
                    ],
                  ),
                  child: Center(
                    child: Text(
                      categories[index].name,
                      style: const TextStyle(fontWeight: FontWeight.w600),
                    ),
                  ),
                );
              },
            ),
          );
        }
        return const SizedBox();
      },
    );
  }

  Widget _buildProductsSection() {
    if (widget.user.token == null) {
      return const SizedBox(); // hide list if not logged in
    }

    return FutureBuilder<List<Product>>(
      future: _productsFuture,
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
        } else if (snapshot.hasError) {
          return Center(child: Text('Error: ${snapshot.error}'));
        } else if (snapshot.hasData) {
          final products = snapshot.data!;
          if (products.isEmpty) {
            return const Center(
              child: Padding(
                padding: EdgeInsets.all(16.0),
                child: Text("You haven't added any products yet."),
              ),
            );
          }
          return ListView.builder(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            itemCount: products.length,
            itemBuilder: (context, index) {
              final product = products[index];
              return Container(
                margin: const EdgeInsets.symmetric(vertical: 6),
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(12),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.grey.withOpacity(0.1),
                      blurRadius: 5,
                      offset: const Offset(0, 3),
                    ),
                  ],
                ),
                child: ListTile(
                  leading: const Icon(
                    Icons.inventory_2_outlined,
                    color: Colors.blueAccent,
                  ),
                  title: Text(product.name),
                  trailing: Text(
                    product.price,
                    style: const TextStyle(fontWeight: FontWeight.bold),
                  ),
                ),
              );
            },
          );
        }
        return const SizedBox();
      },
    );
  }

  Widget _buildDashboardCard(
    String title,
    String value,
    IconData icon,
    Color color,
  ) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.15),
            blurRadius: 6,
            offset: const Offset(0, 3),
          ),
        ],
      ),
      padding: const EdgeInsets.all(12),
      child: Row(
        children: [
          CircleAvatar(
            backgroundColor: color.withOpacity(0.1),
            child: Icon(icon, color: color, size: 20),
          ),
          const SizedBox(width: 12),
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(
                title,
                style: const TextStyle(fontSize: 12, color: Colors.black54),
              ),
              const SizedBox(height: 4),
              Text(
                value,
                style: const TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: 14,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  void _logout() {
    Navigator.pushAndRemoveUntil(
      context,
      MaterialPageRoute(builder: (context) => const LoginScreen()),
      (route) => false,
    );
  }
}


import 'package:flutter/material.dart';
import 'package:ovoride/api/api_response.dart';
import 'package:ovoride/service/product_service.dart';
import '../models/product.dart';
import '../utils/shared_prefs_helper.dart';

class ProductScreen extends StatefulWidget {
  const ProductScreen({super.key});

  @override
  State<ProductScreen> createState() => _ProductScreenState();
}

class _ProductScreenState extends State<ProductScreen> {
  final ProductService _service = ProductService();
  List<Product> _products = [];
  bool _loading = true;
  String? _token;

  final _nameController = TextEditingController();
  final _priceController = TextEditingController();
  int? _editingId;

  @override
  void initState() {
    super.initState();
    _loadProducts();
  }

  Future<void> _loadProducts() async {
    setState(() => _loading = true);
    _token = await SharedPrefsHelper.getToken();
    if (_token == null) {
      setState(() => _loading = false);
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(const SnackBar(content: Text('User not logged in')));
      return;
    }

    final res = await _service.getProducts(_token!);
    setState(() {
      _loading = false;
      _products = res.data ?? [];
    });

    if (res.error != null)
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text(res.error!)));
  }

  Future<void> _openForm({Product? product}) async {
    _editingId = product?.id;
    _nameController.text = product?.name ?? '';
    _priceController.text = product?.price ?? '';

    await showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      builder: (ctx) {
        return Padding(
          padding: EdgeInsets.only(
            bottom: MediaQuery.of(ctx).viewInsets.bottom,
          ),
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Text(
                  product == null ? 'Add Product' : 'Edit Product',
                  style: const TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 12),
                TextField(
                  controller: _nameController,
                  decoration: const InputDecoration(labelText: 'Name'),
                ),
                const SizedBox(height: 8),
                TextField(
                  controller: _priceController,
                  decoration: const InputDecoration(labelText: 'Price'),
                  keyboardType: TextInputType.number,
                ),
                const SizedBox(height: 12),
                Row(
                  children: [
                    Expanded(
                      child: OutlinedButton(
                        onPressed: () => Navigator.pop(ctx),
                        child: const Text('Cancel'),
                      ),
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: ElevatedButton(
                        onPressed: () {
                          Navigator.pop(ctx);
                          _saveProduct();
                        },
                        child: const Text('Save'),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Future<void> _saveProduct() async {
    final name = _nameController.text.trim();
    final price = _priceController.text.trim();
    if (name.isEmpty || price.isEmpty) return;
    setState(() => _loading = true);

    if (_token == null) {
      _token = await SharedPrefsHelper.getToken();
      if (_token == null) {
        setState(() => _loading = false);
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(const SnackBar(content: Text('User not logged in')));
        return;
      }
    }

    ApiResponse<Product> res;
    if (_editingId == null) {
      res = await _service.createProduct(_token!, name, price);
    } else {
      res = await _service.updateProduct(_token!, _editingId!, name, price);
    }

    setState(() => _loading = false);

    if (res.error != null) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text(res.error!)));
    } else {
      _nameController.clear();
      _priceController.clear();
      _editingId = null;
      await _loadProducts();
    }
  }

  Future<void> _confirmDelete(int id) async {
    final ok = await showDialog<bool>(
      context: context,
      builder: (_) => AlertDialog(
        title: const Text('Delete Product'),
        content: const Text('Are you sure you want to delete this product?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(_, false),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () => Navigator.pop(_, true),
            child: const Text('Delete'),
          ),
        ],
      ),
    );
    if (ok != true) return;

    setState(() => _loading = true);
    final res = await _service.deleteProduct(_token!, id);
    setState(() => _loading = false);

    if (res.error != null) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text(res.error!)));
    } else {
      await _loadProducts();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Products'),
        actions: [
          IconButton(onPressed: _loadProducts, icon: const Icon(Icons.refresh)),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () => _openForm(),
        child: const Icon(Icons.add),
      ),
      body: _loading
          ? const Center(child: CircularProgressIndicator())
          : RefreshIndicator(
              onRefresh: _loadProducts,
              child: _products.isEmpty
                  ? ListView(
                      physics: const AlwaysScrollableScrollPhysics(),
                      children: [
                        const SizedBox(height: 60),
                        const Center(
                          child: Text('No products yet. Tap + to create.'),
                        ),
                      ],
                    )
                  : ListView.separated(
                      padding: const EdgeInsets.all(12),
                      itemCount: _products.length,
                      separatorBuilder: (_, __) => const SizedBox(height: 8),
                      itemBuilder: (context, i) {
                        final p = _products[i];
                        return ListTile(
                          leading: p.image != null && p.image!.isNotEmpty
                              ? CircleAvatar(
                                  backgroundImage: NetworkImage(p.image!),
                                )
                              : const Icon(Icons.inventory_2_outlined),
                          title: Text(p.name),
                          subtitle: Text('Price: ${p.price}'),
                          trailing: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              IconButton(
                                icon: const Icon(Icons.edit),
                                onPressed: () => _openForm(product: p),
                              ),
                              IconButton(
                                icon: const Icon(
                                  Icons.delete,
                                  color: Colors.red,
                                ),
                                onPressed: () => _confirmDelete(p.id),
                              ),
                            ],
                          ),
                        );
                      },
                    ),
            ),
    );
  }
}



import 'dart:convert';
import 'package:http/http.dart' as http;
import '../api/api_response.dart';
import '../api/api_urls.dart';
import '../models/user.dart';

class AuthService {
  Future<ApiResponse<User>> login(String email, String password) async {
    try {
      final response = await http.post(
        Uri.parse(APIUrls.login),
        headers: {'Content-Type': 'application/json', 'Accept': 'application/json'},
        body: jsonEncode({'username': email, 'password': password}),
      );

      final jsonResponse = jsonDecode(response.body);

      if (response.statusCode == 200 && jsonResponse['status'] == 'success') {
        final userData = jsonResponse['data'];
        return ApiResponse(data: User.fromJson(userData));
      } else {
        return ApiResponse(
            error: (jsonResponse['message'] is List)
                ? jsonResponse['message'][0]
                : jsonResponse['message'] ?? 'Login failed');
      }
    } catch (e) {
      return ApiResponse(error: 'An unexpected error occurred: $e');
    }
  }

  Future<ApiResponse<User>> register(User user) async {
    try {
      final response = await http.post(
        Uri.parse(APIUrls.register),
        headers: {'Content-Type': 'application/json', 'Accept': 'application/json'},
        body: jsonEncode(user.toJson()),
      );

      final jsonResponse = jsonDecode(response.body);

      if (response.statusCode == 201) {
        final userData = jsonResponse['data'];
        return ApiResponse(data: User.fromJson(userData));
      } else {
        return ApiResponse(
            error: (jsonResponse['message'] is List)
                ? jsonResponse['message'][0]
                : jsonResponse['message'] ?? 'Registration failed');
      }
    } catch (e) {
      return ApiResponse(error: 'An unexpected error occurred: $e');
    }
  }
}



import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:ovoride/api/api_response.dart';
import 'package:ovoride/api/api_urls.dart';
import '../models/category.dart';

class CategoryService {
  Future<Map<String, String>> _headers(String token) async {
    return {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'Authorization': 'Bearer $token',
    };
  }

  Future<ApiResponse<List<Category>>> getCategories(String token) async {
    if (token == null) return ApiResponse(error: 'No token provided');
    try {
      final response = await http.get(
        Uri.parse(APIUrls.category),
        headers: await _headers(token),
      );
      final jsonResponse = _safeDecode(response.body);

      if (response.statusCode == 200) {
        final data = jsonResponse['data'];
        final List<dynamic> list = (data is Map && data['data'] != null)
            ? data['data']
            : (data is List)
            ? data
            : (data != null ? [data] : []);
        final categories = list
            .map((e) => Category.fromJson(Map<String, dynamic>.from(e)))
            .toList();
        return ApiResponse(data: categories);
      } else {
        return ApiResponse(
          error: jsonResponse['message'] ?? 'Failed to load categories',
        );
      }
    } catch (e) {
      return ApiResponse(error: 'Error fetching categories: $e');
    }
  }

  Future<ApiResponse<Category>> createCategory(
    String token,
    String name,
  ) async {
    if (token == null) return ApiResponse(error: 'No token provided');
    try {
      final response = await http.post(
        Uri.parse(APIUrls.categoryCreate),
        headers: await _headers(token),
        body: jsonEncode({'name': name}),
      );
      final jsonResponse = _safeDecode(response.body);

      if (response.statusCode == 200 || response.statusCode == 201) {
        final data = jsonResponse['data'] ?? jsonResponse;
        return ApiResponse(
          data: Category.fromJson(Map<String, dynamic>.from(data)),
        );
      } else {
        return ApiResponse(
          error: jsonResponse['message'] ?? 'Category creation failed',
        );
      }
    } catch (e) {
      return ApiResponse(error: 'Error creating category: $e');
    }
  }

  Future<ApiResponse<Category>> updateCategory(
    String token,
    int id,
    String name,
  ) async {
    if (token == null) return ApiResponse(error: 'No token provided');
    try {
      final url = APIUrls.categoryUpdateOrDelete.replaceAll('id', '$id');
      final response = await http.put(
        Uri.parse(url),
        headers: await _headers(token),
        body: jsonEncode({'name': name}),
      );
      final jsonResponse = _safeDecode(response.body);

      if (response.statusCode == 200) {
        final data = jsonResponse['data'] ?? jsonResponse;
        return ApiResponse(
          data: Category.fromJson(Map<String, dynamic>.from(data)),
        );
      } else {
        return ApiResponse(error: jsonResponse['message'] ?? 'Update failed');
      }
    } catch (e) {
      return ApiResponse(error: 'Error updating category: $e');
    }
  }

  Future<ApiResponse<void>> deleteCategory(String token, int id) async {
    if (token == null) return ApiResponse(error: 'No token provided');
    try {
      final url = APIUrls.categoryUpdateOrDelete.replaceAll('id', '$id');
      final response = await http.delete(
        Uri.parse(url),
        headers: await _headers(token),
      );
      final jsonResponse = _safeDecode(response.body);

      if (response.statusCode == 200) {
        return ApiResponse(data: null);
      } else {
        return ApiResponse(error: jsonResponse['message'] ?? 'Delete failed');
      }
    } catch (e) {
      return ApiResponse(error: 'Error deleting category: $e');
    }
  }

  Map<String, dynamic> _safeDecode(String body) {
    try {
      if (body.trim().isEmpty) return {};
      return jsonDecode(body) as Map<String, dynamic>;
    } catch (_) {
      return {};
    }
  }
}



 import 'dart:convert';
import 'package:http/http.dart' as http;
import '../models/category.dart';
import '../models/dashboard.dart';
import '../models/product.dart';
import '../api/api_response.dart';
import '../api/api_urls.dart';

class HomeService {
  Future<http.Response> _makeAuthenticatedGetRequest(String url, String token) async {
    return await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Authorization': 'Bearer $token',
      },
    );
  }

  Future<ApiResponse<DashboardData>> getDashboardData(String token) async {
    try {
      final response = await _makeAuthenticatedGetRequest(APIUrls.dashboard, token);
      final jsonResponse = jsonDecode(response.body);

      if (response.statusCode == 200) {
        return ApiResponse(data: DashboardData.fromJson(jsonResponse['data']));
      } else {
        return ApiResponse(error: jsonResponse['message'] ?? 'Failed to load dashboard data');
      }
    } catch (e) {
      return ApiResponse(error: 'An unexpected error occurred: $e');
    }
  }

  Future<ApiResponse<List<Product>>> getProducts(String token) async {
    try {
      final response = await _makeAuthenticatedGetRequest(APIUrls.product, token);
      final jsonResponse = jsonDecode(response.body);

      if (response.statusCode == 200) {
        final productsJson = jsonResponse['data']['data'] as List;
        final products = productsJson.map((p) => Product.fromJson(p)).toList();
        return ApiResponse(data: products);
      } else {
        return ApiResponse(error: jsonResponse['message'] ?? 'Failed to load products');
      }
    } catch (e) {
      return ApiResponse(error: 'An unexpected error occurred: $e');
    }
  }

  Future<ApiResponse<List<Category>>> getCategories(String token) async {
    try {
      final response = await _makeAuthenticatedGetRequest(APIUrls.category, token);
      final jsonResponse = jsonDecode(response.body);

      if (response.statusCode == 200) {
        final categoriesJson = jsonResponse['data']['data'] as List;
        final categories = categoriesJson.map((c) => Category.fromJson(c)).toList();
        return ApiResponse(data: categories);
      } else {
        return ApiResponse(error: jsonResponse['message'] ?? 'Failed to load categories');
      }
    } catch (e) {
      return ApiResponse(error: 'An unexpected error occurred: $e');
    }
  }
}



import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:ovoride/api/api_response.dart';
import 'package:ovoride/api/api_urls.dart';
import '../models/product.dart';

class ProductService {
  Future<Map<String, String>> _headers(String token) async {
    return {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'Authorization': 'Bearer $token',
    };
  }

  Future<ApiResponse<List<Product>>> getProducts(String token) async {
    if (token == null) return ApiResponse(error: 'No token provided');
    try {
      final response = await http.get(
        Uri.parse(APIUrls.product),
        headers: await _headers(token),
      );
      final jsonResponse = _safeDecode(response.body);

      if (response.statusCode == 200) {
        final data = jsonResponse['data'];
        final List<dynamic> list = (data is Map && data['data'] != null)
            ? data['data']
            : (data is List)
            ? data
            : (data != null ? [data] : []);
        final products = list
            .map((e) => Product.fromJson(Map<String, dynamic>.from(e)))
            .toList();
        return ApiResponse(data: products);
      } else {
        return ApiResponse(
          error: jsonResponse['message'] ?? 'Failed to load products',
        );
      }
    } catch (e) {
      return ApiResponse(error: 'Error fetching products: $e');
    }
  }

  Future<ApiResponse<Product>> createProduct(
    String token,
    String name,
    String price,
  ) async {
    if (token == null) return ApiResponse(error: 'No token provided');
    try {
      final response = await http.post(
        Uri.parse(APIUrls.productCreate),
        headers: await _headers(token),
        body: jsonEncode({'name': name, 'price': price}),
      );
      final jsonResponse = _safeDecode(response.body);

      if (response.statusCode == 200 || response.statusCode == 201) {
        final data = jsonResponse['data'] ?? jsonResponse;
        return ApiResponse(
          data: Product.fromJson(Map<String, dynamic>.from(data)),
        );
      } else {
        return ApiResponse(
          error: jsonResponse['message'] ?? 'Failed to create product',
        );
      }
    } catch (e) {
      return ApiResponse(error: 'Error creating product: $e');
    }
  }

  Future<ApiResponse<Product>> updateProduct(
    String token,
    int id,
    String name,
    String price,
  ) async {
    if (token == null) return ApiResponse(error: 'No token provided');
    try {
      final url = APIUrls.productUpdateOrDelete.replaceAll('id', '$id');
      final response = await http.put(
        Uri.parse(url),
        headers: await _headers(token),
        body: jsonEncode({'name': name, 'price': price}),
      );
      final jsonResponse = _safeDecode(response.body);

      if (response.statusCode == 200) {
        final data = jsonResponse['data'] ?? jsonResponse;
        return ApiResponse(
          data: Product.fromJson(Map<String, dynamic>.from(data)),
        );
      } else {
        return ApiResponse(error: jsonResponse['message'] ?? 'Update failed');
      }
    } catch (e) {
      return ApiResponse(error: 'Error updating product: $e');
    }
  }

  Future<ApiResponse<void>> deleteProduct(String token, int id) async {
    if (token == null) return ApiResponse(error: 'No token provided');
    try {
      final url = APIUrls.productUpdateOrDelete.replaceAll('id', '$id');
      final response = await http.delete(
        Uri.parse(url),
        headers: await _headers(token),
      );
      final jsonResponse = _safeDecode(response.body);

      if (response.statusCode == 200) {
        return ApiResponse(data: null);
      } else {
        return ApiResponse(error: jsonResponse['message'] ?? 'Delete failed');
      }
    } catch (e) {
      return ApiResponse(error: 'Error deleting product: $e');
    }
  }

  Map<String, dynamic> _safeDecode(String body) {
    try {
      if (body.trim().isEmpty) return {};
      return jsonDecode(body) as Map<String, dynamic>;
    } catch (_) {
      return {};
    }
  }
}



import 'package:shared_preferences/shared_preferences.dart';

class SharedPrefsHelper {
  static const String _tokenKey = 'auth_token';

  static Future<void> saveToken(String token) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_tokenKey, token);
  }

  static Future<String?> getToken() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString(_tokenKey);
  }

  static Future<bool> isLoggedIn() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.containsKey(_tokenKey);
  }

  static Future<void> removeToken() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_tokenKey);
  }

  static Future<void> clearAll() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.clear();
  }
}


import 'package:flutter/material.dart';
import 'login/login_screen.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Flutter Auth Demo',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: const LoginScreen(),
    );
  }
}



------------

I Give you my full flutter project. I have two problems in product screen and category screen.
when navigate to these two page, do not show any product list or category list, also I am not adding any proudct or category, because no data go to backend.
Do fix and solve this and give full corect code.